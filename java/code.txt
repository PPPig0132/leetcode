package Stack;

/*
算术优先级： ()  +-   只有加减没有乘除
算术栈和符号栈
遇到乘除，先计算出结果
遇到加减和前括号，先进栈
遇到后括号，符号栈出栈至前括号完
*/

public class Calculater {
    public int calculate(String s) {
        s=s.replaceAll(" ","");
        char s1[]=s.toCharArray();
        int []stack=new int[s1.length];
        char operator[]=new char[s1.length];
        int pos1=new int[s1.length];//记录每个括号对应的数起始的位置
        int pos2=new int[s1.length];//记录每个括号对应的符号起始的位置
        int top1=-1,top2=-1,sum=0,count=-1,a;//count用于记录括号的数量
        for(int i=0;i<s1.length;++i){
            switch(s1[i]){
                case '+':
                    operator[++top2]=s1[i];
                    break;
                case '-':
                    operator[++top2]=s1[i];
                    if(i==0 || s1[i-1]=='('){
                        stack[++top1]=0;
                    }
                    //stack[++top1]=0;
                    break;
                case '(':
                    pos1[++count]=top1+1;
                    pos2[count]=top2+1;
                    break;
                case ')':
                    for(int i=pos2[count];i<=top2;++i){
                        switch(operator[i]){
                            case '+':
                                stack[pos1[count]+i]+=stack[pos1[count]+i+1];
                                break;
                            case '-':
                                stack[pos1[count]+i+1]=stack[pos1[count]+i]-stack[pos1[count]+i+1];
                                break;
                        }

                    }
                    stack[pos1[count]]=stack[top1];
                    top1=pos1[count];
                    top2=pos2[count--];
                    top2--;
                    break;
                default:
                    if(s1[i]=='0'){
                        stack[++top1]=0;
                        break;
                    }
                    sum=s1[i]-'0';
                    i++;
                    while(i<s1.length&&s1[i]-'0'>-1&&s1[i]-'0'<10){
                        sum=sum*10+(s1[i]-'0');
                        i++;
                    }
                    i--;
                    stack[++top1]=sum;
                    sum=0;
            }

        }
        int ans=stack[0],index=0;
        for(int i=0;i<=top2;++i){
            switch(operator[i]){
                case '+':
                    ans+=stack[++index];
                    break;
                case '-':
                    if(i==0 && top2==top1){
                        ans=0-ans;
                    }
                    else{
                        ans-=stack[++index];
                    }
                    break;
            }
        }
        // while(top1!=0){
        //     a=stack[top1--];
        //     stack[top1]+=a;
        // }
        return ans;
    }
    public static void main(String[] args) {
        Calculater c=new Calculater();
        String s="1-(    -2)";
        // // System.out.println(c.calculate(s));
        // s="- (3 + (4 + 5))";
        // System.out.println(c.calculate(s));
        s="2-4-(8+2-6+(8+4-(1)+8-10))";
        System.out.println(c.calculate(s));
    }
}
